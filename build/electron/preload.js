var e=require("electron"),n=process.argv.find(o=>o.startsWith("--entrypoint="))?.split("=")[1],i=n&&JSON.parse(n);if(typeof i!="string")throw new Error("The `entrypoint` field must be a string.");var t=process.argv.find(o=>o.startsWith("--idbfs-mountpoints="))?.split("=")[1],p=t&&JSON.parse(t),d={entrypoint:i,idbfsMountpoints:p};e.contextBridge.exposeInMainWorld("appConfig",d);var c={readSitePackagesSnapshot:()=>e.ipcRenderer.invoke("readSitePackagesSnapshot"),readPrebuiltPackageNames:()=>e.ipcRenderer.invoke("readPrebuiltPackageNames"),readStreamlitAppDirectory:()=>e.ipcRenderer.invoke("readStreamlitAppDirectory")};e.contextBridge.exposeInMainWorld("archivesAPI",c);function g(){return Math.floor(Math.random()*1e6)}var k={USE_NODEJS_WORKER:process.argv.includes("--nodejs-worker"),initialize:()=>e.ipcRenderer.invoke("initializeNodeJsWorker"),postMessage:({data:o,onPortMessage:s})=>{console.debug("nodeJsWorkerAPI.postMessage",{data:o,onPortMessage:s});let r=s&&g();e.ipcRenderer.send("messageToNodeJsWorker",{data:o,portId:r}),r&&e.ipcRenderer.on(`nodeJsWorker-portMessage-${r}`,(A,a)=>{s(a)})},onMessage:o=>e.ipcRenderer.on("messageFromNodeJsWorker",(s,r)=>{console.debug("nodeJsWorkerAPI.onMessage",r),o(r)}),terminate:()=>e.ipcRenderer.invoke("terminateNodeJsWorker")};e.contextBridge.exposeInMainWorld("nodeJsWorkerAPI",k);
